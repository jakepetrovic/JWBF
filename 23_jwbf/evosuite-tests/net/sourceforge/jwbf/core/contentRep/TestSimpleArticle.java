/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.jwbf.core.contentRep;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.util.Date;
import net.sourceforge.jwbf.core.contentRep.ArticleMeta;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSimpleArticle {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setEditSummary((String) null);
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle0.equals(simpleArticle1));
      assertEquals(false, simpleArticle1.isMinorEdit());
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle((String) null);
      SimpleArticle simpleArticle1 = new SimpleArticle((ArticleMeta) simpleArticle0);
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, simpleArticle1.isMinorEdit());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle((String) null);
      simpleArticle0.setEditor((String) null);
      SimpleArticle simpleArticle1 = new SimpleArticle((ArticleMeta) simpleArticle0);
      assertEquals(false, simpleArticle1.isMinorEdit());
      assertFalse(simpleArticle0.equals(simpleArticle1));
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle((String) null);
      simpleArticle0.addText("");
      assertEquals(false, simpleArticle0.isMinorEdit());
      assertEquals("", simpleArticle0.getText());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setEditTimestamp((Date) null);
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
      assertFalse(simpleArticle1.equals(simpleArticle0));
      assertEquals(false, simpleArticle1.isMinorEdit());
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      // Undeclared exception!
      try {
        simpleArticle0.setEditTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle1.equals(simpleArticle0));
      
      simpleArticle0.setRevisionId((String) null);
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.addTextnl("=emporary Redirect");
      assertEquals("\n=emporary Redirect", simpleArticle0.getText());
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setText((String) null);
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertFalse(simpleArticle1.equals(simpleArticle0));
      assertEquals(false, simpleArticle1.isMinorEdit());
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setRevisionId((String) null);
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertFalse(simpleArticle1.equals(simpleArticle0));
      assertEquals(false, simpleArticle1.isMinorEdit());
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      boolean boolean0 = simpleArticle0.isRedirect();
      assertEquals(false, boolean0);
      assertEquals(false, simpleArticle0.isMinorEdit());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      boolean boolean0 = simpleArticle0.equals((Object) null);
      assertEquals(false, simpleArticle0.isMinorEdit());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      boolean boolean0 = simpleArticle0.equals((Object) ":");
      assertEquals(false, simpleArticle0.isMinorEdit());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle1.equals(simpleArticle0));
      
      simpleArticle0.setRevisionId(")2h<6|g");
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle0.equals(simpleArticle1));
      
      simpleArticle0.setText((String) null);
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle1.equals(simpleArticle0));
      
      simpleArticle0.setText("L@\"");
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, simpleArticle1.isMinorEdit());
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle((String) null);
      SimpleArticle simpleArticle1 = new SimpleArticle((String) null);
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, simpleArticle1.isMinorEdit());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      SimpleArticle simpleArticle1 = (SimpleArticle)simpleArticle0.clone();
      assertTrue(simpleArticle1.equals(simpleArticle0));
      
      simpleArticle0.setTitle("L@\"");
      boolean boolean0 = simpleArticle0.equals((Object) simpleArticle1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setEditTimestamp((Date) null);
      int int0 = simpleArticle0.hashCode();
      assertEquals(923521, int0);
      assertEquals(false, simpleArticle0.isMinorEdit());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setRevisionId((String) null);
      int int0 = simpleArticle0.hashCode();
      assertEquals(false, simpleArticle0.isMinorEdit());
      assertEquals(923521, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setText((String) null);
      int int0 = simpleArticle0.hashCode();
      assertEquals(false, simpleArticle0.isMinorEdit());
      assertEquals(923521, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleArticle simpleArticle0 = new SimpleArticle();
      simpleArticle0.setTitle((String) null);
      int int0 = simpleArticle0.hashCode();
      assertEquals(923521, int0);
      assertEquals(false, simpleArticle0.isMinorEdit());
  }
}
