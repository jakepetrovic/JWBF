/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.jwbf.mediawiki.actions.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.qos.logback.core.joran.spi.ConsoleTarget;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MWActionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoginData loginData0 = new LoginData();
      PostLoginOld postLoginOld0 = new PostLoginOld("ek+8QG^nl;9ev4", "ek+8QG^nl;9ev4", "ek+8QG^nl;9ev4", loginData0);
      Get get0 = new Get("ek+8QG^nl;9ev4", "ek+8QG^nl;9ev4");
      String string0 = postLoginOld0.processReturningText("ek+8QG^nl;9ev4", (HttpAction) get0);
      assertEquals("ek+8QG^nl;9ev4", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MediaWiki.Version mediaWiki_Version0 = MediaWiki.Version.MW1_10;
      GetUserinfo getUserinfo0 = null;
      try {
        getUserinfo0 = new GetUserinfo(mediaWiki_Version0);
        fail("Expecting exception: VersionException");
      } catch(VersionException e) {
        /*
         * unsupported version: MW1_10
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MediaWiki.Version mediaWiki_Version0 = MediaWiki.Version.MW1_11;
      GetRevision getRevision0 = new GetRevision(mediaWiki_Version0, "ek+8QG^nl;9ev4", (-864));
      assertNotNull(getRevision0);
      
      getRevision0.setHasMoreMessages(true);
      assertEquals(true, getRevision0.hasMoreMessages());
  }

  @Test
  public void test3()  throws Throwable  {
      MediaWiki.Version mediaWiki_Version0 = MediaWiki.Version.MW1_11;
      GetRevision getRevision0 = new GetRevision(mediaWiki_Version0, "ek+8QG^nl;9ev4", (-864));
      assertEquals(true, getRevision0.hasMoreMessages());
      assertNotNull(getRevision0);
      
      boolean boolean0 = getRevision0.hasMoreMessages();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = ConsoleTarget.class;
      MediaWiki.Version[] mediaWiki_VersionArray0 = MWAction.findSupportedVersions(class0);
      assertNotNull(mediaWiki_VersionArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      MediaWiki.Version mediaWiki_Version0 = MediaWiki.Version.MW1_18;
      GetUserinfo getUserinfo0 = new GetUserinfo(mediaWiki_Version0);
      assertEquals(true, getUserinfo0.hasMoreMessages());
      assertNotNull(getUserinfo0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = MWAction.createNsString((int[]) null);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = MWAction.createNsString(intArray0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }
}
